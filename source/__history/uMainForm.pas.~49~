unit uMainForm;

interface

{$DEFINE LOAD_DS}

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExeMod, EncdDecd, Utils, Vcl.ExtDlgs, Vcl.StdCtrls, Vcl.FileCtrl,
  Vcl.Samples.Spin, Vcl.ToolWin, Vcl.ActnMan, Vcl.ActnCtrls, Vcl.OleCtrls,
  Vcl.Tabs, Vcl.Touch.Keyboard, Vcl.Grids, Vcl.Samples.Calendar,
  Vcl.Mask, Vcl.ExtCtrls, Vcl.Samples.Gauges, Vcl.ColorGrd, Vcl.CheckLst;

function Base64_Decode(cStr: ansistring): ansistring;
function Base64_Encode(cStr: string): ansistring;

type
  T__mainForm = class(TForm)
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure WMHotKey(var Msg: TMessage); message WM_HOTKEY;
    procedure ReceiveMessage(var Msg: TMessage); message WM_COPYDATA;
  end;

var
  __mainForm: T__mainForm;
  selfScript: string = '';
  selfEnabled: boolean = False;
  dllPHPPath: string = '';

implementation

uses uMain, uPHPMod;

{$R *.dfm}

function Base64_Decode(cStr: ansistring): ansistring;
const
  Base64Table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
var
  ResStr: ansistring;
  DecStr: ansistring;
  RecodeLine: array [1 .. 76] of byte;
  f1: word;
  l: integer;
begin
  Result := DecodeString(String(cStr));
  exit;
  l := length(cStr);
  ResStr := '';
  for f1 := 1 to l do
    if cStr[f1] = '=' then
      RecodeLine[f1] := 0
    else
      RecodeLine[f1] := pos(String(cStr[f1]), Base64Table) - 1;
  f1 := 1;
  while f1 < length(cStr) do
  begin
    DecStr := chr(byte(RecodeLine[f1] shl 2) + RecodeLine[f1 + 1] shr 4) +
      chr(byte(RecodeLine[f1 + 1] shl 4) + RecodeLine[f1 + 2] shr 2) +
      chr(byte(RecodeLine[f1 + 2] shl 6) + RecodeLine[f1 + 3]);
    ResStr := ResStr + DecStr;
    Inc(f1, 4);
  end;
  Result := ResStr;
end;

function Base64_Encode(cStr: string): ansistring;
begin
  Result := AnsiString(EncodeString(cStr));
  __mainForm.BringToFront;
end;

procedure T__mainForm.FormActivate(Sender: TObject);
var
  f: string;
begin
  if appShow then
    exit;

  appShow := True;

{$IFDEF LOAD_DS}
  f := ExtractFilePath(ParamStr(0)) + 'system\include.pse';
{$ELSE}
  f := ParamStr(1);
{$ENDIF}
  if selfEnabled then
  begin

    __fMain.Button1.Destroy;
    __fMain.MainMenu.Destroy;
    __fMain.b_Restart.Destroy;
    __fMain.b_Run.Destroy;
    __fMain.Memo1.Destroy;
    __fMain.Width := 0;
    __fMain.Height := 0;
    __fMain.BorderStyle := bsNone;

    phpMOD.RunCode(AnsiString(selfScript));
    selfEnabled := True;

    appShow := True;
  end
  else if ExtractFileExt(f) = '.pse' then
  begin
    phpMOD.RunCode(File2String(f));
  end
  else if ParamStr(1) <> '-run' then
  begin
    uPHPMod.SetAsMainForm(__fMain);
    Application.ShowMainForm := True;
    Application.MainFormOnTaskBar := True;
  end
  else
    phpMOD.RunFile(ParamStr(2));

  appShow := True;
end;

procedure T__mainForm.FormCreate(Sender: TObject);
var
  f: string;
  EM: TExeStream;
begin
  Self.Left := -999;
{$IFDEF LOAD_DS}
  f := ExtractFilePath(ParamStr(0)) + 'system\include.pse';
{$ELSE}
  f := ParamStr(1);
{$ENDIF}
  selfScript := '';
  EM := TExeStream.Create(ParamStr(0));

  progDir := ExtractFilePath(Application.ExeName);
  moduleDir := progDir + 'ext\';
  engineDir := progDir + 'engine\';
  if DirectoryExists(progDir + 'core\') then
    engineDir := progDir + 'core\';

  selfScript := EM.ExtractToString('$PHPSOULENGINE\inc.php');
  if (selfScript <> '') then
  begin

    selfEnabled := True;
    T__fMain.extractPHPEngine(EM);
  end;

  if (ExtractFileExt(f) = '.pse') and (selfScript = '') then
  begin
    if pos(':', f) > 0 then
      progDir := ExtractFilePath(f)
    else
      progDir := progDir + ExtractFilePath(f);
  end
  else if selfScript <> '' then
    progDir := ExtractFilePath(ParamStr(0))
  else if f <> '' then
    progDir := ExtractFilePath(f);
end;

procedure T__mainForm.ReceiveMessage(var Msg: TMessage);
var
  pcd: PCopyDataStruct;
  s: ansistring;
begin
  pcd := PCopyDataStruct(Msg.LParam);
  s := AnsiString(PChar(pcd.lpData));
  phpMOD.RunCode('Receiver::event(' + AnsiString(IntToStr(Msg.WParam)) + ',''' + AnsiString(AddSlashes(String(s))) + ''');');
end;

procedure T__mainForm.WMHotKey(var Msg: TMessage);
var
  fuModifiers: word;
  uVirtKey: word;
begin
  fuModifiers := LOWORD(Msg.LParam);
  uVirtKey := HIWORD(Msg.LParam);
  phpMOD.RunCode('HotKey::event(' + AnsiString(IntToStr(fuModifiers)) + ',' + AnsiString(IntToStr(uVirtKey)) + ');');
  inherited;
end;

end.
