unit guiProperties;

{$ifdef fpc}
{$mode delphi}{$H+}
{$endif}

interface

uses
  Classes, SysUtils,
  zendTypes,
  ZENDAPI,
  phpTypes,
  PHPAPI,
  phpUtils,
  php4delphi,
  propertiesEngine, vcl.dialogs,  TypInfo, Variants;

procedure InitializeGuiProperties(PHPEngine: TPHPEngine);

procedure regConstant();

procedure gui_propGet(ht: integer; return_value: pzval; return_value_ptr: pzval;
  this_ptr: pzval; return_value_used: integer; TSRMLS_DC: pointer); cdecl;
procedure gui_propType(ht: integer; return_value: pzval;
  return_value_ptr: pzval; this_ptr: pzval; return_value_used: integer;
  TSRMLS_DC: pointer); cdecl;
procedure gui_propExists(ht: integer; return_value: pzval;
  return_value_ptr: pzval; this_ptr: pzval; return_value_used: integer;
  TSRMLS_DC: pointer); cdecl;
procedure gui_propList(ht: integer; return_value: pzval;
  return_value_ptr: pzval; this_ptr: pzval; return_value_used: integer;
  TSRMLS_DC: pointer); cdecl;
procedure gui_propSet(ht: integer; return_value: pzval; return_value_ptr: pzval;
  this_ptr: pzval; return_value_used: integer; TSRMLS_DC: pointer); cdecl;


implementation

procedure ct_GetPropValue;
    var
      IntObj: ppzval;
      PropName: ppzval;
      Value: String;
  begin
    if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
    begin
      Value := TypInfo.GetPropValue(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName));
	  case DelphiFunctions.is_numeric(Value) of
		true:
			ZVAL_LONG(return_value, StrToInt(Value));
		false:
			ZVAL_STRINGW(return_value, PWideChar(WideString(Value)), false);
	  end;
    end;
  end;

  procedure ct_SetPropValue;
    var
      IntObj, PropName, Value: ppzval;
  begin
    if ZvalArgsGet(ht, @IntObj, @PropName, @Value) = SUCCESS then
	begin
		case Value^._type of
			IS_LONG:
				TypInfo.SetPropValue(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName), Value^.value.lval);
			IS_STRING:
				TypInfo.SetPropValue(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName), String(Value^.value.str.val));
			IS_BOOL:
				TypInfo.SetPropValue(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName), zend_bool(Value^.value.lval));
		end;
	end;
  end;

  procedure ct_ExistsProp;
	var
      IntObj: ppzval;
	  PropName: ppzval;
  begin

    if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
    	begin

		if IsPublishedProp(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName)) = true then
		    ZVAL_TRUE(return_value)
		else
        ZVAL_FALSE(return_value);
    end;

  end;


procedure regConstant();
begin
  regConstList(['tkUnknown', 'tkInteger', 'tkChar', 'tkEnumeration', 'tkFloat',
    'tkSet', 'tkMethod', 'tkSString', 'tkLString', 'tkAString',
    'tkWString', 'tkVariant', 'tkArray', 'tkRecord', 'tkInterface',
    'tkClass', 'tkObject', 'tkWChar', 'tkBool', 'tkInt64', 'tkQWord',
    'tkDynArray', 'tkInterfaceRaw', 'tkProcVar', 'tkUString', 'tkUChar']);
end;

procedure gui_propGet;
var
  p: pzval_array;
  varrr:variant;
  o: TObject;
  inf: PPropInfo;
begin
  if ht < 2 then
  begin
    zend_wrong_param_count(TSRMLS_DC);
    Exit;
  end;

  zend_get_parameters_my(ht, p, TSRMLS_DC);

  o := TObject(integer(Z_LVAL(p[0]^)));

  inf := TypInfo.GetPropInfo(o, Z_STRVAL(p[1]^));

  if inf <> nil then
    if(p[1]^._type = IS_STRING) THEN
    begin
      variant2zval(GetPropValue(o,Z_STRVAL(p[1]^)), return_value);
    end;
  dispose_pzval_array(p);
end;


procedure gui_propType;
var
  p: pzval_array;
begin
  if ht < 2 then
  begin
    zend_wrong_param_count(TSRMLS_DC);
    Exit;
  end;
  zend_get_parameters_my(ht, p, TSRMLS_DC);

  ZVAL_LONG(return_value, getPropertyType(Z_LVAL(p[0]^), Z_STRVAL(p[1]^)));

  dispose_pzval_array(p);
end;

procedure gui_propExists;
var
  p: pzval_array;
begin
  if ht < 2 then
  begin
    zend_wrong_param_count(TSRMLS_DC);
    Exit;
  end;
  zend_get_parameters_my(ht, p, TSRMLS_DC);

  ZVAL_BOOL(return_value, existProperty(Z_LVAL(p[0]^), Z_STRVAL(p[1]^)));

  dispose_pzval_array(p);
end;

procedure gui_propList;
var
  p: pzval_array;
begin
  if ht < 2 then
  begin
    zend_wrong_param_count(TSRMLS_DC);
    Exit;
  end;
  zend_get_parameters_my(ht, p, TSRMLS_DC);

  ZVAL_STRING(return_value, PAnsiChar(getProperties(Z_LVAL(p[0]^))), True);

  dispose_pzval_array(p);
end;


procedure gui_propSet;
var
  p: pzval_array;
begin
  if ht < 3 then
  begin
    zend_wrong_param_count(TSRMLS_DC);
    Exit;
  end;
  zend_get_parameters_my(ht, p, TSRMLS_DC);

  if p[2]^^._type in [IS_LONG, IS_BOOL, IS_DOUBLE, IS_STRING] then
    ZVAL_BOOL(return_value, setProperty(Z_LVAL(p[0]^), Z_STRVAL(p[1]^), zval2variant(p[2]^^)));

  dispose_pzval_array(p);
end;

procedure InitializeGuiProperties(PHPEngine: TPHPEngine);
begin
  PHPEngine.AddFunction('gui_propGet', @gui_propGet);
  PHPEngine.AddFunction('gui_propType', @gui_propType);
  PHPEngine.AddFunction('gui_propExists', @gui_propExists);
  PHPEngine.AddFunction('gui_propList', @gui_propList);
  PHPEngine.AddFunction('gui_propSet', @gui_propSet);
end;


end.
